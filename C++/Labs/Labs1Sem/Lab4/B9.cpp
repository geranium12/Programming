/*
	Герасимчик Анна. 1 курс. 7 группа.
	Условие:
	В9.	Получить  квадратную  матрицу A =(aij), (i=1..n, j=1..n), у которой элементы 
	окаймляющих строк и столбцов равны натуральным числам  от 1 до 4*(n-1), следующий 
	квадрат из строк и столбцов - натуральными числами  от 1 до 4*(n-3) и так далее, 
	напр.
	Идея:
	Создаем квадратную пустую матрицу. Заполняем матрицу, пока не заполним все клетки 
	(идем вправо, потом вниз, затем влево, далее вверх).
	В коде комментарии.
	Тесты:
	input			output
1	1				1
2	2				1   2
					4   3
3	3				1   2   3
					8   1   4
					7   6   5
4	4				 1   2   3   4
					12   1   2   5
					11   4   3   6
					10   9   8   7
5	5				 1   2   3   4   5
					16   1   2   3   6
					15   8   1   4   7
					14   7   6   5   8
					13  12  11  10   9
*/
#include <iostream>
#include <iomanip>

using namespace std;

int main()
{
	setlocale(LC_ALL, ".1251");
	
	// Ввод
	int n;
	cout << "Введите n" << endl;
	cin >> n;

	// Создание матрицы
	int **mat = new int*[n];
	for (int i = 0; i < n; i++) 
	{
		mat[i] = new int[n];
		for (int j = 0; j < n; j++)
			mat[i][j] = 0;
	}

	// Заполнение матрицы
	int k = 1; // число, которым заполняем каждую клетку внутреннего квадрата. Естественно, мы увеличиваем k на 1 каждый раз
	int k1 = 1; // количество всех клеток квадрата, которые мы заполнили
	int w = 0; // (ширина отступа) количество клеток матрицы, которые мы отступаем от края
	int i = 0; // индекс текущей строки матрицы
	int j = 0; // индекс текущего столбца матрицы
	while (k1 <= n * n)
	{
		i = w;
		j = w;

		// заполняем все клетки справа
		while (j < n - w)
		{
			mat[i][j] = k;
			j++;
			k++;
		}
		j--;

		// заполняем все клетки внизу
		i++;
		while (i < n - w)
		{
			mat[i][j] = k;
			i++;
			k++;
		}
		i--;

		// заполняем все клетки слева
		j--;
		while (j >= w)
		{
			mat[i][j] = k;
			j--;
			k++;
		}
		j++;

		// заполняем все клетки вверху
		i--;
		while (i > w)
		{
			mat[i][j] = k;
			i--;
			k++;
		}
		k--;
		w++; // увеличиваем отступ (приближаемся к центру матрицы)
		k1 += k; // считаем, сколько клеток мы заполнили за все время
		k = 1; // начинаем заполнять следующий внутренний квадрат опять с 1
	}

	// Вывод
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
			cout << setw(3) << mat[i][j] << " ";
	cout << endl;
	}
	system("pause");
	return 0;
}